searchState.loadedDescShard("composable", 0, "A Composable Architecture\nAll of the possible actions that can be used to modify …\n<code>Effects</code> are used within <code>Reducer</code>s to propagate <code>Action</code>s as …\nWhen a <code>Scheduler</code> uses a repeating interval, that interval …\nThe first <code>Action</code> should be sent immediately.\nBoth unit tests and command line applications often need …\n<code>Reducer</code>s are responsible for updating a <code>Store</code>’s state in …\nThe state container for the application.\nAsynchronous work being performed by a <code>Store</code>.\nBy implementing the <code>TestClock</code> trait, <code>TestStore</code> can be used …\nA state container for the application testing.\nThe first <code>Action</code> should not be send until after the …\n<strong>Getting Started</strong>\nCancels the task; meaning its <code>Future</code> won’t be polled …\nCreates a new <code>Store</code> with a default initial state.\nErgonomic dependency handling.\nDerive macros used to ease the creation of recursive …\nDetaches the task; leaving its <code>Future</code> running in the …\nAdditional work to be done after performing an action.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Store</code> and returns its current <code>state</code> value.\nStops the <code>Store</code>’s runtime and returns its current <code>state</code> …\nCreates a new <code>Store</code> with its initial state generated by a …\nCreates a new <code>Store</code> with its initial state generated by a …\nChecks that the <code>Store</code>’s <code>Reducer</code> was called with <code>action</code> …\nUpdates the <code>Reducer</code>’s state in response to the action …\nCalls the <code>Store</code>’s <code>Reducer</code> with <code>action</code> and asserts the …\nCalls the <code>Store</code>’s <code>Reducer</code> with <code>action</code>.\nOptional view feature.\nWaits until all scheduled tasks have completed.\nCreates a new <code>Store</code> with <code>state</code> as its initial state.\nCreates a new <code>Store</code> with <code>state</code> as its initial state.\nChangelog\nA wrapper type for accessing dependencies\nThe default value for a dependency.\nReturns <code>None</code> if the dependency is <code>None</code>, otherwise returns …\nReturns <code>None</code> if the dependency is <code>None</code>, otherwise calls <code>f</code> …\nConverts into a <code>Option&lt;&amp;T&gt;</code>.\nReturns a slice of the dependency value, if any. If this …\nMaps the dependency to an <code>Option&lt;T&gt;</code> by <strong>cloning</strong> the …\nMaps the dependency to an <code>Option&lt;T&gt;</code> by <strong>copying</strong> the …\nReturns the dependency <code>Some</code> value.\nReturns <code>None</code> if the dependency is <code>None</code>, otherwise calls …\nReturns the argument unchanged.\nCalls the provided closure with a reference to the …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the dependency is a <code>None</code> value.\nReturns <code>true</code> if the dependency is a <code>Some</code> value.\nReturns <code>true</code> if the dependency is a <code>Some</code> and the value …\nReturns an iterator over the dependency value, if any.\nMaps to <code>Option&lt;U&gt;</code> by applying a function to a dependency …\nReturns the provided default result (if <code>None</code>), or applies …\nComputes a default function result (if <code>None</code>), or applies a …\nCreates a optional reference to the dependency of type <code>T</code>.\nTransforms into a <code>Result&lt;&amp;T, E&gt;</code>, mapping <code>Some</code> to <code>Ok</code> and …\nTransforms into a <code>Result&lt;&amp;T, E&gt;</code>, mapping <code>Some</code> to <code>Ok</code> and …\nReturns the dependency if it is <code>Some</code>, otherwise returns <code>rhs</code>…\nReturns the dependency if it is <code>Some</code>, otherwise calls <code>f</code> …\nSAFETY\nReturns the contained <code>Some</code> value.\nReturns the dependency <code>Some</code> value or a provided default.\nReturns the dependency <code>Some</code> value or a default.\nReturns the dependency <code>Some</code> value or computes it from a …\nSupply a tuple of dependencies for the supplied closure\nSupply a single dependency for the supplied closure.\nReturns <code>Some</code> if only one of\nAll of the possible actions that can be used to modify …\nSee the <code>RecursiveReducer</code> macro for example usage.\nCompiler Errors\nThis <code>reduce</code> should perform any actions that are needed …\nThe <code>Action</code> type sent by this <code>Effects</code>.\nThe <code>Action</code> sends scheduled by this <code>Scheduler</code>.\n<code>Effects</code> are used within <code>Reducer</code>s to propagate <code>Action</code>s as …\nWhen a <code>Scheduler</code> uses a repeating interval, that interval …\nThe first <code>Action</code> should be sent immediately.\n<code>Effects</code> are also <code>Scheduler</code>s — able to apply modifiers to …\nAn <code>Effects</code> that scopes its <code>Action</code>s to one that sends child …\nThe first <code>Action</code> should not be send until after the …\nAn effect that sends an <code>Action</code> through the <code>Store</code>’s …\nSends the <code>Action</code> after <code>duration</code>.\nSends the <code>Action</code> at <code>instant</code>.\nAn effect that coalesces repeated attempts to send <code>Action</code>s …\nSends the <code>Action</code> every <code>interval</code>.\nReturns the argument unchanged.\nAn effect that runs a <code>Future</code> and, if it returns an <code>Action</code>, …\nCalls <code>U::from(self)</code>.\nScopes the <code>Effects</code> down to one that sends child actions.\nAn effect that runs a <code>Stream</code> and sends every <code>Action</code> it …\nA <code>Task</code> represents asynchronous work that will then <code>send</code> …\nAn effect that sends an <code>Action</code> through the <code>Store</code>’s …\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\n<code>View</code> events.\ntouches… buttons…\nAlias for <code>euclid::default::SideOffsets2D&lt;f32&gt;</code>\nA surface, or file format, that views may be rendered to.\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nText data\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nUser interface element and modifiers to re-configure it.\nCauses a tuple of <code>View</code>s to cascade horizontally, rather …\nAscender height of the Text’s font.\nBegins a new path.\nCapital height of the Text’s font.\nCloses the current path.\nAdds a cubic Bézier to the current path.\nDescender height of the Text’s font. Note that this is a …\nHow the <code>View</code> is drawn\nUser-interface <code>Event</code> handling of the <code>View</code>\nSet the size of the <code>View</code> to a fixed value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGPU <code>Output</code> for <code>Views</code>\nHeight of the Text’s font.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine gap of the Text’s font.\nAdds a line to the current path.\nAdd padding to all sides of the <code>View</code>\nAdd the same padding to all sides of the <code>View</code>\nAdd different padding to the horizontal and vertical sides …\nAdd padding to the bottom of the <code>View</code>\nAdd padding to the horizontal sides of the <code>View</code>\nAdd padding to the left side of the <code>View</code>\nAdd padding to the right side of the <code>View</code>\nAdd padding to the top of the <code>View</code>\nAdd padding to the vertical sides of the <code>View</code>\nAdds a quadratic Bézier to the current path.\nThe intrinsic size of the <code>View</code>\nSVG <code>Output</code> for <code>Views</code>\nText handling for <code>View</code> construction.\nA minimal, <em>but viable</em>, user interface layer.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe user interface state carried between cycles by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Output</code> and returns the constructed …\nCreates an indexed-triangle data <code>Output</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Output</code> and returns the constructed SVG string.\nCreates a Scalable Vector Graphics <code>Output</code>.\nText is set vertically from bottom to top.\nDefines the direction in which text is to be read.\nA buffer that contains the results of the shaping process.\nInitial, unset direction.\nA script language.\nText is set horizontally from left to right.\nText is set horizontally from right to left.\nA text script.\nText is set vertically from top to bottom.\nReturns the language as a string.\nHorizontal face ascender.\nCapital height,\nClears the content of the glyph buffer and returns an empty\nHorizontal face descender,\nFamily name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Font</code> from the raw font data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Font</code> from a font collection. Returns the font at …\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nFull font name that reflects all family and relevant …\nGet the glyph infos.\nGet the glyph positions.\nHorizontal height,\nUnique font identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the buffer contains no elements.\nReturns the length of the data of the buffer.\nLine gap,\nConverts the glyph buffer content into a string.\nFont size in points.\nThe final step in building a Font.\nSubfamily name.\nReturns script’s tag.\nReturns a <code>Text</code> in this font.\nShould begin with the syntax “Version <em>N</em>.<em>M</em>” (upper …\nMinimal <code>Font</code> handling.\nUse large sizes. This is the default on mobile platforms.\nUse medium sizes.\nUse small sizes.\n<code>Scale</code> defines a predefined scale for scalable content.\nuse extra large sizes.\nuse extra small sizes.\nUse extra extra large sizes.\nUse extra extra small sizes. This is the default on …\nUse extra extra extra large sizes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Font</code> scale per <code>Accessibility</code> level\nShades of gray; where\nGray wih a noticable blue tint\nGray with a subtle blue tint\nGray with no tint; pure grays\nThe Inter font\nBody <code>Font</code> styles.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLabel <code>Font</code> styles.\nTitle <code>Font</code> styles.\nSets the default font for the supplied closure.\nLarge variant\nMedium variant\nSmall variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLarge variant\nMedium variant\nSmall variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLarge variant\nMedium variant\nSmall variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of space taken up by a <code>spacer::L()</code>\nThe amount of space taken up by a <code>spacer::M()</code>\nThe amount of space taken up by a <code>spacer::S()</code>\nThe amount of space taken up by a <code>spacer::XL()</code>\nThe amount of space taken up by a <code>spacer::XS()</code>\nThe amount of space taken up by a <code>spacer::XXL()</code>\nThe amount of space taken up by a <code>spacer::XXS()</code>\nThe amount of space taken up by a <code>spacer::XXXL()</code>\nThe amount of space taken up by a <code>spacer::L()</code>\nThe amount of space taken up by a <code>spacer::M()</code>\nThe amount of space taken up by a <code>spacer::S()</code>\nThe amount of space taken up by a <code>spacer::XL()</code>\nThe amount of space taken up by a <code>spacer::XS()</code>\nThe amount of space taken up by a <code>spacer::XXL()</code>\nThe amount of space taken up by a <code>spacer::XXS()</code>\nThe amount of space taken up by a <code>spacer::XXXL()</code>")